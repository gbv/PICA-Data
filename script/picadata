#!/usr/bin/env perl
use v5.14.1;
use App::picadata;

exit App::picadata->new(@ARGV)->run;

__END__

=head1 NAME

picadata - parse and validate PICA+ data

=head1 SYNOPSIS

picadata [--from TYPE] [--schema FILE] [--to TYPE] {OPTIONS} [FILE]

=head1 DESCRIPTION

Parse, validate and/or serialize PICA+ data from the command line, e.g.:

  picadata pica.dat -t xml           # convert binary to XML
  picadata -c -f plain < pica.plain  # parse and count records
  picadata -p 003@ pica.xml -t       # extract field 003@
  picadata pica.xml -s schema.json   # validate against Avram schema

  # document fields used in a record
  picadata -t fields pica.xml -s https://format.k10plus.de/avram.pl?profile=k10plus

=head1 OPTIONS

=head2 --from, -f

PICA serialization type (plain, plus, binary, XML, ppxml) with XML as default.
Guessed from input filename unless specified. See format documentation at
L<http://format.gbv.de/pica>

=head2 --to, -t

PICA serialization type to enable writing parsed PICA data. Use C<f>/C<fields>
or C<sf>/C<subfields> to list all distinct (sub)fields.

=head2 --number, -n

Stop parsing after C<n> records. Can be abbreviated as C<-1>, C<-2>...

=head2 --order, -o

Sort record fields by field identifier or by occurrence for level 2.

=head2 --annotate, -a, -A

Enforce annotated PICA as output format or prevent with C<-A>. Combined with
C<--schema> this will set annotations C<!> and C<?> to mark validation errors.

=head2 --count, -c

Count number of records, holdings, items, and fields.

=head2 --path, -p

Select fields or subfield values specified by PICA Path expressions. Multiple
expressions can be separated by C<|> or by repeating the option. 

=head2 --schema, -s

L<Avram Schema|http://format.gbv.de/schema/avram/specification> to validate
against. Can be a file or an URL.

=head2 --unknown, -u

Report unknown fields and subfields on validation (disabled by default).

=head2 --build, -b, -B

Build an Avram schema from records. Option C<-B> abbreviates the schema.

=head2 --color, -C

Colorize output. Only supported for PICA plain and PICA plus format.

=head2 --mono, -M

Monochrome (don't colorize output).

=head2 --version, -V

Print version number and exit.

=head1 SEE ALSO

See L<catmandu> for a more elaborated command line tool for data processing
(transformation, API access...), including PICA+ with L<Catmandu::PICA>.

=cut
