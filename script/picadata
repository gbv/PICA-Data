#!/usr/bin/env perl
use v5.14.1;

use PICA::Data;
use PICA::Schema;
use PICA::Schema::Builder;
use IO::File;
use Getopt::Long;
use Pod::Usage;
use JSON::PP;

GetOptions(
    'from|f=s'   => \(my $from),
    'to|t:s'     => \(my $to),
    'schema|s=s' => \(my $schema),
    'build|b'    => \(my $build),
    'unknown|u!' => \(my $report_unknown),
    'count|c'    => \(my $count),
    'path|p=s'   => \(my $path),
    'C'          => \(my $color),
    'M'          => \(my $nocolor),
    'help|?'     => \(my $help)
) or pod2usage(2);
pod2usage(-verbose => 99, -sections => "SYNOPSIS|OPTIONS|DESCRIPTION")
    if $help
    or (!@ARGV and -t);

my %types = (
    bin    => 'Binary',
    dat    => 'Binary',
    binary => 'Binary',
    plain  => 'Plain',
    plus   => 'Plus',
    xml    => 'XML',
    ppxml  => 'PPXML',
    json   => 'JSON',
);

my $input = '-';
$from = shift @ARGV if @ARGV && !$from && $types{lc $ARGV[0]};
if (!defined $path) {
    my $pattern = '[012.][0-9.][0-9.][A-Z@.]';
    my @pathes;
    while (@ARGV && $ARGV[0] =~ /^$pattern(\|$pattern)*$/) {
        push @pathes, shift @ARGV;
    }
    $path = join '|', @pathes;
}
$input = shift @ARGV if @ARGV;

$from = $1 if !$from && $input =~ /\.([a-z]+)$/ && $types{lc $1};

$from = 'plain' unless $from;
pod2usage("unknown serialization type: $from") unless $types{lc $from};

$to = $from unless $to;
pod2usage("unknown serialization type: $to") unless !$to or $types{lc $to};

my $builder;
if ($build) {
    $builder = PICA::Schema::Builder->new;
    $to      = undef;
}

my $fh = $input eq '-' ? *STDIN : IO::File->new($input, "r")
    or die "failed to open '$input'\n";
my $parser = "PICA::Parser::${types{$from}}"->new($fh, bless => 1);

my %options = (utf8 => 0);
$options{color} = {
    tag        => 'blue',
    occurrence => 'blue',
    code       => 'red',
    value      => 'green',
    }
    if !$nocolor && ($color || -t *STDOUT);

my $writer = $to ? "PICA::Writer::${types{$to}}"->new(%options) : undef;

my %schema_options = (ignore_unknown => !$report_unknown);

$count = {records => 0, holdings => 0, items => 0, fields => 0,} if $count;

my $invalid = 0;
if ($schema) {
    my $fh = IO::File->new($schema);
    $schema = PICA::Schema->new(decode_json(join "\n", <$fh>));
}

my @pathes = defined $path
    ? map {
    my $p = eval {PICA::Path->new($_)};
    $p || die "invalid pica path: $_\n";
    } split /\|/, $path
    : ();

while (my $record = $parser->next) {
    $record = $record->fields(@pathes) if @pathes;

    $writer->write($record) if $writer;
    if ($schema) {
        my @errors = $schema->check($record, %schema_options);
        if (@errors) {
            for (@errors) {
                my $msg
                    = defined $record->{_id} ? $record->{_id} . ": $_" : $_;
                print "$msg\n";
            }
            $invalid++;
        }
    }
    $builder->add($record) if $builder;
    if ($count) {
        $count->{records}++;
        $count->{holdings} += @{$record->holdings};
        $count->{items}    += @{$record->items};
        $count->{fields}   += @{$record->{record}};
    }
}

$writer->end() if $writer && $writer->can('end');

if ($count) {
    $count->{invalid} = $invalid if defined $invalid;
    print $count->{$_} . " $_\n"
        for grep {defined $count->{$_}}
        qw(records invalid holdings items fields);
}

print JSON::PP->new->indent->space_after->canonical->convert_blessed->encode(
    $builder->schema)
    if $builder;

__END__

=head1 NAME

picadata - parse and validate PICA+ data

=head1 SYNOPSIS

picadata [[--from] TYPE] [--schema FILE] [--to [TYPE]] {OPTIONS} [FILE]

=head1 DESCRIPTION

Parse, validate and/or serialize PICA+ data from the command line, e.g.:

  picadata pica.xml -s schema.json   # validate against Avram schema
  picadata pica.dat -t xml           # convert binary to XML
  picadata -c -f plain < pica.plain  # parse and count records
  picadata -p 003@ pica.xml -t       # extract field 003@

=head1 OPTIONS

=head2 --from, -f

PICA serialization type (plain, plus, binary, XML, ppxml) with XML as default.
Guessed from input filename unless specified. See format documentation at
L<http://format.gbv.de/pica>

=head2 --to, -t

PICA serialization type to enable writing parsed PICA data.

=head2 --count, -c

Count number of records, holdings, items, and fields.

=head2 --path, -p

Limit the record to fields specified by a simple PICA Path expression.

=head2 --schema, -s

L<Avram Schema|http://format.gbv.de/schema/avram/specification> to validate
against.

=head2 --unknown, -u

Report unknown fields and subfields when validating (disabled by default).

=head2 --build, -b

Build an Avram schema from given records.

=head2 -C

Colorize output. Only supported for PICA plain and PICA plus format.

=head2 -M

Monochrome (don't colorize output).

=head1 SEE ALSO

See L<catmandu> for a more elaborated command line tool for data processing
(transformation, API access...), including PICA+ with L<Catmandu::PICA>.

=cut
